<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
      Ant build file for the database component of ABRAID-MP.
      Copyright (c) 2014 University of Oxford
      
      NB: The script assumes that the database's superuser password is either empty or is in file ~/.pgpass (this is %APPDATA%\postgresql\pgpass.conf on Windows)
-->
<project name="Database" basedir="." default="create.test.database">
    <description>Creates the ABRAID-MP database.</description>

    <!-- To customise the database properties, copy file database.properties.example to database.properties and modify it -->
    <!-- If database.properties does not exist, this uses database.properties.example -->
    <property file="database.properties" />
    <property file="database.properties.example" />
    <!-- By default, scripts are run by connecting to the specified database -->
    <property name="connect.database.name" value="${database.name}" />

    <!-- Creates the database containing test data -->
    <target name="create.test.database" depends="create.database, create.test.data" />

    <!-- Creates the database containing production data only (and test admin unit data if the shapefiles are unavailable) -->
    <target name="create.database" depends="create.schema, import.shapefiles, create.test.admin.unit.data, create.data" />
    
    <!-- Creates the database schema -->
    <target name="create.schema">
        <echo>Creating database named ${database.name}</echo>
        <antcall target="run.database.script">
            <param name="database.script.name" value="create_database.sql"/>
            <param name="database.script.dir" value="."/>
            <!-- Connect to the default database -->
            <param name="connect.database.name" value=""/>
        </antcall>
    </target>

    <!-- Imports shapefiles, if the property "shapefiles.path" is specified (this must be a valid path to the shapefiles folder) -->
    <target name="import.shapefiles" if="shapefiles.path">
        <antcall target="import.shapefile">
            <param name="shapefile.name" value="admin_unit_global.shp"/>
            <param name="shapefile.import.options" value="-a"/> <!-- Append to table that was created in tables.sql -->
        </antcall>
        <antcall target="import.shapefile">
            <param name="shapefile.name" value="admin_unit_qc.shp"/>
            <param name="shapefile.import.options" value="-a"/> <!-- Append to table that was created in tables.sql -->
        </antcall>
        <antcall target="import.shapefile">
            <param name="shapefile.name" value="admin_unit_simplified_global.shp"/>
            <param name="shapefile.import.options" value="-c"/> <!-- Create new table (it is then dropped in migrate_shapefiles.sql) -->
        </antcall>
        <antcall target="import.shapefile">
            <param name="shapefile.name" value="admin_unit_simplified_tropical.shp"/>
            <param name="shapefile.import.options" value="-c"/> <!-- Create new table (it is then dropped in migrate_shapefiles.sql) -->
        </antcall>
        <antcall target="import.shapefile">
            <param name="shapefile.name" value="admin_unit_tropical.shp"/>
            <param name="shapefile.import.options" value="-a"/> <!-- Append to table that was created in tables.sql -->
        </antcall>
        <antcall target="import.shapefile">
            <param name="shapefile.name" value="country.shp"/>
            <param name="shapefile.import.options" value="-a"/> <!-- Append to table that was created in tables.sql -->
        </antcall>
        <antcall target="import.shapefile">
            <param name="shapefile.name" value="land_sea_border.shp"/>
            <param name="shapefile.import.options" value="-a"/> <!-- Append to table that was created in tables.sql -->
        </antcall>
        <antcall target="run.database.script">
            <param name="database.script.name" value="migrate_shapefiles.sql"/>
            <param name="database.script.dir" value="."/>
        </antcall>
    </target>

    <!-- Adds administrative unit test data to an existing database, unless the property "shapefiles.path" is specified.
         This ensures that tests can still use the shapefile data (except for the geometries themselves) even if the shapefiles
         cannot be accessed. -->
    <target name="create.test.admin.unit.data" unless="shapefiles.path">
        <antcall target="run.database.script">
            <param name="database.script.name" value="admin_units_testdata.sql"/>
            <param name="database.script.dir" value="testdata/admin_units"/>
        </antcall>
    </target>
    
    <!-- Adds data to an existing database -->
    <target name="create.data">
        <antcall target="run.database.script">
            <param name="database.script.name" value="data.sql"/>
            <param name="database.script.dir" value="data"/>
        </antcall>
    </target>

    <!-- Adds test roles to an existing database -->
    <target name="create.test.roles">
        <antcall target="run.database.script">
            <param name="database.script.name" value="test_roles.sql"/>
            <param name="database.script.dir" value="."/>
        </antcall>
    </target>
    
    <!-- Adds test data to an existing database -->
    <target name="create.test.data">
        <antcall target="run.database.script">
            <param name="database.script.name" value="testdata.sql"/>
            <param name="database.script.dir" value="testdata"/>
        </antcall>
    </target>

    <!-- SUB-TARGETS -->
    
    <!-- Runs a database script -->
    <target name="run.database.script">
        <exec executable="psql" failonerror="true" dir="${database.script.dir}">
            <arg value="-U" />
            <arg value="${superuser.name}" />
            <arg value="-q" />
            <arg value="-w" />
            <arg value="-v" />
            <arg value="database_name=${database.name}" />
            <arg value="-v" />
            <arg value="application_username=${application.username}" />
            <arg value="-v" />
            <arg value="application_password=${application.password}" />
            <arg value="-v" />
            <arg value="ON_ERROR_STOP=ON" />
            <arg value="-f" />
            <arg value="${database.script.name}" />
            <arg value="${connect.database.name}" />
        </exec>
    </target>

    <!-- Imports a shapefile into the database -->
    <!-- This calls a wrapper script for the appropriate operating system. Calling the commands (shp2pgsql and psql)
         directly using exec was many times slower. -->
    <target name="import.shapefile">
        <echo>Importing shapefile "${shapefiles.path}/${shapefile.name}"</echo>
        <echo/>
        <exec executable="${basedir}/import_shapefile.bat" failonerror="true" osfamily="windows">
            <arg value="${shapefiles.path}/${shapefile.name}" />
            <arg value="${superuser.name}" />
            <arg value="${database.name}" />
            <arg value="${shapefile.import.options}" />
        </exec>

        <exec executable="${basedir}/import_shapefile.sh" failonerror="true" osfamily="unix">
            <arg value="${shapefiles.path}/${shapefile.name}" />
            <arg value="${superuser.name}" />
            <arg value="${database.name}" />
            <arg value="${shapefile.import.options}" />
        </exec>
    </target>
</project>

<?xml version="1.0" encoding="UTF-8"?>
<!--
      Contains database-specific beans.
      Copyright (c) 2014 University of Oxford
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- Data Access Objects -->
    <bean id="alertDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.AlertDaoImpl" autowire="constructor" />
    <bean id="adminUnitDiseaseExtentClassDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.AdminUnitDiseaseExtentClassDaoImpl" autowire="constructor" />
    <bean id="adminUnitGlobalDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.AdminUnitGlobalDaoImpl" autowire="constructor" />
    <bean id="adminUnitQCDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.AdminUnitQCDaoImpl" autowire="constructor" />
    <bean id="adminUnitReviewDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.AdminUnitReviewDaoImpl" autowire="constructor" />
    <bean id="adminUnitTropicalDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.AdminUnitTropicalDaoImpl" autowire="constructor" />
    <bean id="countryDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.CountryDaoImpl" autowire="constructor" />
    <bean id="covariateInfluenceDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.CovariateInfluenceDaoImpl" autowire="constructor" />
    <bean id="diseaseExtentClassDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.DiseaseExtentClassDaoImpl" autowire="constructor" />
    <bean id="diseaseGroupDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.DiseaseGroupDaoImpl" autowire="constructor" />
    <bean id="diseaseOccurrenceDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.DiseaseOccurrenceDaoImpl" autowire="constructor" />
    <bean id="diseaseOccurrenceReviewDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.DiseaseOccurrenceReviewDaoImpl" autowire="constructor" />
    <bean id="effectCurveCovariateInfluenceDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.EffectCurveCovariateInfluenceDaoImpl" autowire="constructor" />
    <bean id="expertDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.ExpertDaoImpl" autowire="constructor" />
    <bean id="feedDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.FeedDaoImpl" autowire="constructor" />
    <bean id="geoNameDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.GeoNameDaoImpl" autowire="constructor" />
    <bean id="geoNamesLocationPrecisionDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.GeoNamesLocationPrecisionDaoImpl" autowire="constructor" />
    <bean id="healthMapCountryDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.HealthMapCountryDaoImpl" autowire="constructor" />
    <bean id="healthMapDiseaseDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.HealthMapDiseaseDaoImpl" autowire="constructor" />
    <bean id="landSeaBorderDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.LandSeaBorderDaoImpl" autowire="constructor" />
    <bean id="locationDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.LocationDaoImpl" autowire="constructor" />
    <bean id="modelRunDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.ModelRunDaoImpl" autowire="constructor" />
    <bean id="passwordResetRequestDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.PasswordResetRequestDaoImpl" autowire="constructor" />
    <bean id="provenanceDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.ProvenanceDaoImpl" autowire="constructor" />
    <bean id="submodelStatisticDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.SubmodelStatisticDaoImpl" autowire="constructor" />
    <bean id="validatorDiseaseGroupDao" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.ValidatorDiseaseGroupDaoImpl" autowire="constructor" />

    <bean id="nativeSql" class="uk.ac.ox.zoo.seeg.abraid.mp.common.dao.NativeSQLImpl" autowire="constructor" />

    <!-- Database configuration -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <value>
                hibernate.dialect = ${hibernate.dialect}
                hibernate.show_sql = ${hibernate.show_sql}
            </value>
        </property>
        <property name="packagesToScan" value="uk.ac.ox.zoo.seeg.abraid.mp.common.domain" />
    </bean>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <!-- NB: See documentation for the (many) other c3p0 configuration settings -->
        <!-- Access settings -->
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- Number of connections acquired when the pool is exhausted -->
        <property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
        <!-- Number of connections acquired on startup -->
        <property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
        <!-- Minimum number of connections in the pool -->
        <property name="minPoolSize" value="${c3p0.minPoolSize}" />
        <!-- Maximum number of connections in the pool -->
        <property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
        <!-- Maximum connection idle time (seconds) before being automatically closed (0 = never close) -->
        <property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
        <!-- Keep connections alive by performing a simple query upon checking into the pool (asynchronously) -->
        <property name="testConnectionOnCheckin" value="${c3p0.testConnectionOnCheckin}" />
        <!-- Keep connections alive by performing a simple query upon checking out of the pool (NB this strategy has
             high reliability but there is a delay before returning to the client) -->
        <property name="testConnectionOnCheckout" value="${c3p0.testConnectionOnCheckout}" />
        <!-- Keep connections alive by performing a simple query every n seconds if the connection is idle -->
        <property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <tx:annotation-driven/>

    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
</beans>

<?xml version="1.0" encoding="UTF-8"?>
<!--
      Genericized ant build file containing the targets to build any submodule of ABRAID-MP.
      Copyright (c) 2014 University of Oxford
-->
<project name="module_build" default="build" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:jacoco="antlib:org.jacoco.ant">
  <property environment="env"/>

  <basename property="module.name" file="${basedir}"/>

  <!-- Directories -->
  <property name="project.root.dir" value="${basedir}/../.."/>
  <property name="out.dir" value="${basedir}/out"/>
  <property name="dist.out.dir" value="${out.dir}/dist"/>
  <property name="artifacts.out.dir" value="${out.dir}/artifacts"/>
  <property name="module.out.dir" value="${out.dir}/production"/>
  <property name="test.out.dir" value="${out.dir}/test"/>
  <property name="doc.out.dir" value="${out.dir}/doc"/>
  <property name="report.out.dir" value="${out.dir}/report"/>
  <property name="lib.dir" value="${basedir}/lib"/>
  <property name="lib.local.dir" value="${basedir}/lib-local" />
  <property name="lib.local.external.dir" value="${lib.local.dir}/external" />
  <property name="lib.local.analysis.dir" value="${lib.local.dir}/analysis" />
  <property name="test.run.dir" value="${project.root.dir}/src" /><!-- This is what IntelliJ uses -->
  <property name="src.dir" value="${basedir}/src"/>
  <property name="test.dir" value="${basedir}/test"/>
  <property name="web.dir" value="${basedir}/web"/>

  <!-- Compiler options -->
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value="-encoding UTF8"/>
  <property name="compiler.max.memory" value="128m"/>

  <!-- JDK -->
  <property name="jdk.home" value="${java.home}"/>

  <!-- Properties override. Default build settings go in build.properties, override these using user.properties (the latter is not checked in) -->
  <property file="${basedir}/user.properties"/>
  <property file="${basedir}/build.properties"/>
  <property file="${project.root.dir}/user.properties"/>
  <property file="${project.root.dir}/build.properties"/>
  <property name="home.dir" value="${user.home}"/>

  <!-- Versioning -->
  <exec executable="git" outputproperty="repository.version">
    <arg value="describe"/>
    <arg value="--dirty"/>
  </exec>
  <tstamp>
    <format property="time.stamp" pattern="yyyy-MM-dd_HH:mm:ss"/>
  </tstamp>
  <echo>Ant running against repository version: ${repository.version}</echo>

  <!-- Get OS -->
  <condition property="os-windows">
    <os family="windows"/>
  </condition>
  <condition property="os-mac">
    <os family="mac"/>
  </condition>
  <condition property="os-linux32">
    <or>
      <os name="Linux" arch="i386" />
      <os name="Linux" arch="x86" />
    </or>
  </condition>
  <condition property="os-linux64">
    <or>
      <os name="Linux" arch="AMD64" />
      <os name="Linux" arch="x86_64" />
    </or>
  </condition>

  <!-- Classpath -->
  <property name="build.sysclasspath" value="ignore"/>
  <path id="build.classpath">
    <fileset dir="${lib.dir}/build" includes="*.jar"/>
    <fileset dir="${lib.local.external.dir}" includes="*.jar"/>
  </path>

  <path id="test.classpath">
    <fileset dir="${lib.dir}/build" includes="*.jar"/>
    <fileset dir="${lib.dir}/test" includes="*.jar"/>
    <fileset dir="${lib.dir}/testutils" includes="*.jar" erroronmissingdir="false" />
    <fileset dir="${lib.local.external.dir}" includes="*.jar"/>
  </path>

  <path id="analysis.classpath">
    <fileset dir="${lib.dir}/analysis" includes="*.jar"/>
  </path>

  <!-- CI targets -->
  <target name="full" depends="print.start, clean, compile.production, compile.tests, test.coverage, check.quality, check.extras, generate.docs, publish.package, collate.artifacts, print.summary" description="Build pipeline">
    <fail message="Quality checks failed!" if="build.failure" />
  </target>

  <target name="print.summary" depends="test.summary, js.test.summary, style.summary, bug.summary, combine.results, composite.summary" />

  <target name="print.start">
    <echo message="[Summary]" />
    <echo message="[Summary] Starting ${module.name}" />
  </target>

  <target name="test.summary" if="test.failure">
    <echo>[Summary] ${module.name}: Tests unsuccessful!</echo>
  </target>

  <target name="js.test.summary" if="js.test.failure">
    <echo>[Summary] ${module.name}: JS tests unsuccessful!</echo>
  </target>

  <target name="style.summary" if="style.failure">
    <echo>[Summary] ${module.name}: Styling errors!</echo>
  </target>

  <target name="bug.summary" if="bug.failure">
    <echo>[Summary] ${module.name}: Bugs detected!</echo>
  </target>

  <target name="combine.results">
    <condition property="build.failure">
        <or>
          <isset property="test.failure"/>
          <isset property="js.test.failure"/>
          <isset property="style.failure"/>
          <isset property="bug.failure"/>
       </or>
     </condition>
  </target>

  <target name="composite.summary" unless="build.failure">
    <echo>[Summary] ${module.name}: Quality checks passed!</echo>
  </target>

  <!-- Build targets -->
  <target name="build" depends="clean, compile.production, compile.tests, publish.package" description="Compile module"/>

  <target name="compile.production" depends="retrieve.libs" description="Compile module; production classes">
    <mkdir dir="${module.out.dir}"/>
    <!-- Build -->
    <javac destdir="${module.out.dir}" srcdir="${src.dir}" classpathref="build.classpath" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args}"/>
    </javac>
    <!-- Copy resources -->
    <copy todir="${module.out.dir}">
      <fileset dir="${src.dir}">
        <patternset>
          <exclude name="**/?*.java"/>
          <exclude name="**/?*.class"/>
        </patternset>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.tests" depends="compile.production" description="Compile module; test classes" unless="skip.tests">
    <mkdir dir="${test.out.dir}"/>
    <!-- Build -->
    <javac destdir="${test.out.dir}" srcdir="${test.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <classpath>
        <path refid="test.classpath"/>
        <dirset dir="${module.out.dir}"/>
      </classpath>
      <compilerarg line="${compiler.args}"/>
    </javac>
    <!-- Copy resources -->
    <copy todir="${test.out.dir}">
      <fileset dir="${test.dir}">
        <patternset>
          <exclude name="**/?*.java"/>
          <exclude name="**/?*.class"/>
        </patternset>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <!-- Lib targets -->
  <property name="ivy.install.version" value="2.3.0" />
  <condition property="ivy.home" value="${env.IVY_HOME}">
    <isset property="env.IVY_HOME" />
  </condition>
  <property name="ivy.home" value="${home.dir}/.ant" />
  <property name="ivy.jar.dir" value="${ivy.home}/lib" />
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

  <target name="download.ivy">
    <mkdir dir="${ivy.jar.dir}"/>
    <!-- download Ivy from web site so that it can be used even without any special installation -->
    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <target name="create.lib.dirs">
    <mkdir dir="${lib.dir}" />
    <mkdir dir="${lib.local.external.dir}" />
    <mkdir dir="${lib.local.analysis.dir}" />
  </target>

  <target name="init.ivy" depends="download.ivy">
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    <ivy:settings file="${project.root.dir}/src/ivy-settings.xml" />
  </target>

  <target name="resolve.libs" depends="init.ivy">
   <ivy:resolve log="download-only"/>
  </target>

  <target name="retrieve.libs" depends="create.lib.dirs, resolve.libs, retrieve.manual.libs" unless="skip.libs">
    <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision]-[type].[ext]" sync="true" />
  </target>

  <target name="retrieve.manual.libs" depends="retrieve.jacoco, retrieve.phantom" />

  <!-- Get JaCoCo manually -->
  <property name="jacoco.version" value="0.6.2.201301080920" />

  <target name="retrieve.jacoco" depends="check.jacoco, resolve.jacoco" />

  <target name="check.jacoco">
    <condition property="needs-jacoco">
      <not>
        <available file="${lib.local.analysis.dir}/jacocoant-${jacoco.version}.jar"/>
      </not>
    </condition>
  </target>

  <target name="resolve.jacoco" if="needs-jacoco">
    <get skipexisting="true" src="http://mchr3k-eclipse.appspot.com/files/jacoco-${jacoco.version}.zip" dest="${lib.local.analysis.dir}/jacoco-${jacoco.version}.zip" />
    <unzip src="${lib.local.analysis.dir}/jacoco-${jacoco.version}.zip" dest="${lib.local.analysis.dir}">
      <patternset>
        <include name="lib/jacocoant.jar"/>
      </patternset>
      <mapper type="flatten"/>
    </unzip>
    <move file="${lib.local.analysis.dir}/jacocoant.jar" tofile="${lib.local.analysis.dir}/jacocoant-${jacoco.version}.jar"/>
    <delete file="${lib.local.analysis.dir}/jacoco-${jacoco.version}.zip"/>
  </target>

  <!-- Get Phantom manually -->
  <property name="phantom.version" value="1.9.7" />

  <target name="retrieve.phantom" depends="check.phantom" if="needs-phantom">
    <antcall target="resolve.phantom" />
  </target>

  <target name="check.phantom">
    <condition property="needs-phantom">
      <not>
        <or>
          <available file="${lib.local.analysis.dir}/phantomjs-${phantom.version}"/>
          <available file="${lib.local.analysis.dir}/phantomjs-${phantom.version}.exe"/>
        </or>
      </not>
    </condition>
    <antcall target="find.phantom" />
  </target>

  <target name="resolve.phantom" depends="determine.phantom.os.properties, download.phantom, unzip.phantom, untar.phantom">
    <move file="${lib.local.analysis.dir}/phantomjs" tofile="${lib.local.analysis.dir}/phantomjs-${phantom.version}" failonerror="false"/>
    <move file="${lib.local.analysis.dir}/phantomjs.exe" tofile="${lib.local.analysis.dir}/phantomjs-${phantom.version}.exe" failonerror="false"/>
    <delete file="${lib.local.analysis.dir}/${phantom.package.name}.${phantom.package.extension}"/>
    <antcall target="find.phantom" />
    <chmod file="${phantom.executable}" perm="o+r" failonerror="false"/>
  </target>

  <target name="find.phantom">
    <condition property="phantom.executable" value="${lib.local.analysis.dir}/phantomjs-${phantom.version}.exe">
      <available file="${lib.local.analysis.dir}/phantomjs-${phantom.version}.exe"/>
    </condition>
    <condition property="phantom.executable" value="${lib.local.analysis.dir}/phantomjs-${phantom.version}">
      <available file="${lib.local.analysis.dir}/phantomjs-${phantom.version}"/>
    </condition>
  </target>

  <target name="download.phantom" depends="determine.phantom.os.properties">
    <get skipexisting="true" src="http://cdn.bitbucket.org/ariya/phantomjs/downloads/${phantom.package.name}.${phantom.package.extension}" dest="${lib.local.analysis.dir}/${phantom.package.name}.${phantom.package.extension}" />
  </target>

  <target name="unzip.phantom" unless="phantom-is-tar">
    <unzip src="${lib.local.analysis.dir}/${phantom.package.name}.${phantom.package.extension}" dest="${lib.local.analysis.dir}">
      <patternset>
        <include name="${phantom.package.name}/${phantom.executable.path}"/>
      </patternset>
      <mapper type="flatten"/>
    </unzip>
  </target>

  <target name="untar.phantom" if="phantom-is-tar">
    <untar compression="bzip2" src="${lib.local.analysis.dir}/${phantom.package.name}.${phantom.package.extension}" dest="${lib.local.analysis.dir}">
      <patternset>
        <include name="${phantom.package.name}/${phantom.executable.path}"/>
      </patternset>
      <mapper type="flatten"/>
    </untar>
  </target>

  <target name="determine.phantom.os.properties" depends="determine.phantom.paths.win, determine.phantom.paths.lin64, determine.phantom.paths.lin32, determine.phantom.paths.mac" />

  <target name="determine.phantom.paths.win" if="os-windows">
    <property name="phantom.package.name" value="phantomjs-${phantom.version}-windows"/>
    <property name="phantom.package.extension" value="zip"/>
    <property name="phantom.executable.path" value="phantomjs.exe"/>
  </target>

  <target name="determine.phantom.paths.mac" if="os-mac">
    <property name="phantom.package.name" value="phantomjs-${phantom.version}-mac"/>
    <property name="phantom.package.extension" value="zip"/>
    <property name="phantom.package.compression" value="zip"/>
    <property name="phantom.executable.path" value="bin/phantomjs"/>
  </target>

  <target name="determine.phantom.paths.lin64" if="os-linux64">
    <property name="phantom.package.name" value="phantomjs-${phantom.version}-linux-x86_64"/>
    <property name="phantom.package.extension" value="tar.bz2"/>
    <property name="phantom.executable.path" value="bin/phantomjs"/>
    <property name="phantom-is-tar" value="true" />
  </target>

  <target name="determine.phantom.paths.lin32" if="os-linux32">
    <property name="phantom.package.name" value="phantomjs-${phantom.version}-linux-i686"/>
    <property name="phantom.package.extension" value="tar.bz2"/>
    <property name="phantom.executable.path" value="bin/phantomjs"/>
    <property name="phantom-is-tar" value="true" />
  </target>

  <!-- Test targets -->
  <target name="unit.test" depends="compile.tests">
    <property name="jacoco.coverage.agent" value=""/> <!-- Note this will have no effect if it's already set by jacoco:agent -->
    <junit printsummary="off" fork="yes" forkmode="once" failureproperty="test.failure" dir="${test.run.dir}">
      <jvmarg value="${jacoco.coverage.agent}" />
      <jvmarg value="-Xms128M"/>
      <jvmarg value="-Xmn64M"/>
      <jvmarg value="-Xmx512M"/>
      <jvmarg value="-Dlog4j.configuration=file:log4j-test.properties"/>
      <formatter type="brief" usefile="false"/>
      <classpath>
        <path refid="test.classpath"/>
        <dirset dir="${module.out.dir}"/>
        <dirset dir="${test.out.dir}"/>
      </classpath>
      <batchtest>
        <fileset dir="${test.out.dir}">
          <include name="**/*Test.class"/>
          <exclude name="**/*IntegrationTest.class"/>
          <exclude name="**/*SystemTest.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="integration.test" depends="compile.tests">
    <property name="jacoco.coverage.agent" value=""/> <!-- Note this will have no effect if it's already set by jacoco:agent -->
    <junit printsummary="off" fork="yes" forkmode="once" failureproperty="test.failure" dir="${test.run.dir}">
      <jvmarg value="${jacoco.coverage.agent}" />
      <jvmarg value="-Xms128M"/>
      <jvmarg value="-Xmn64M"/>
      <jvmarg value="-Xmx512M"/>
      <jvmarg value="-Dlog4j.configuration=file:log4j-test.properties"/>
      <formatter type="brief" usefile="false"/>
      <classpath>
        <path refid="test.classpath"/>
        <dirset dir="${module.out.dir}"/>
        <dirset dir="${test.out.dir}"/>
      </classpath>
      <batchtest>
        <fileset dir="${test.out.dir}">
          <include name="**/*IntegrationTest.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="run.tests" depends="unit.test, integration.test" />

  <target name="test.coverage" depends="jacoco.agent, run.tests"> <!-- Using both unit and integration tests in coverage metric -->
    <jacoco:report>
      <options>
        <sourcedirectives/>
      </options>
      <executiondata>
        <file file="${report.out.dir}/coverage/jacoco.exec"/>
      </executiondata>
      <structure name="${module.name} Coverage">
        <classfiles>
          <fileset dir="${module.out.dir}"/>
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="${src.dir}"/>
        </sourcefiles>
      </structure>
      <html destdir="${report.out.dir}/coverage"/>
      <xml destfile="${report.out.dir}/coverage/report.xml"/>
    </jacoco:report>
    <script language="javascript"><![CDATA[
      // Read the xml coverage report and extract the net line coverage to echo into the ant log.
      // Note: maybe switch to branch coverage?
      importClass(java.io.File);
      importClass(java.io.FileReader);
      importClass(java.io.BufferedReader);

      var file = new File(project.getProperty("report.out.dir")+"/coverage/report.xml");
      fileReader = new FileReader(file);
      bufferedReader = new BufferedReader(fileReader);
      var text = bufferedReader.readLine(); // single line file

      var counters = text.match(/\<counter\ type\=\"LINE\"\ missed\=\"([0-9]+)\"\ covered\=\"([0-9]+)\"\/\>/g);
      var totalCounter = counters[counters.length - 1]; // The totals are the last counters in the file
      var missed = parseInt(totalCounter.match(/missed\=\"([0-9]+)\"/)[1]);
      var covered = parseInt(totalCounter.match(/covered\=\"([0-9]+)\"/)[1]);

      echo = project.createTask("echo");
      echo.setMessage("[Summary] "+project.getProperty("module.name")+" Line Coverage "+covered+"/"+(covered+missed)+" = "+(100*covered/(covered+missed)).toFixed(2)+"%");
      echo.perform();
    ]]></script>
  </target>

  <target name="jacoco.agent" depends="retrieve.libs">
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
      <classpath path="${lib.local.analysis.dir}/jacocoant-${jacoco.version}.jar"/>
    </taskdef>
    <delete file="${report.out.dir}/coverage/jacoco.exec" />
    <jacoco:agent property="jacoco.coverage.agent" destfile="${report.out.dir}/coverage/jacoco.exec" excludes="jersey.*" />
  </target>

  <!-- Package targets -->
  <target name="build.package" depends="build.jar" description="Builds a deployment package, default to building a JAR, override at module level to build WAR."/>

  <target name="build.jar" depends="compile.production, create.dist.dir, create.jar.manifest">
    <jar jarfile="${dist.out.dir}/ABRAID-MP_${module.name}.jar" manifest="${dist.out.dir}/MANIFEST.MF">
      <fileset dir="${module.out.dir}">
        <include name="**/*.class"/>
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>
      </fileset>
    </jar>
    <delete file="${dist.out.dir}/MANIFEST.MF"/>
  </target>

  <target name="create.dist.dir">
    <delete dir="${dist.out.dir}"/>
    <mkdir dir="${dist.out.dir}"/>
  </target>

  <target name="create.jar.manifest">
    <manifest file="${dist.out.dir}/MANIFEST.MF">
      <attribute name="Version" value="${repository.version}"/>
      <attribute name="Built-On" value="${time.stamp}"/>
    </manifest>
  </target>

  <target name="build.war" depends="compile.production, create.dist.dir">
    <war warfile="${dist.out.dir}/ABRAID-MP_${module.name}.war" webxml="${web.dir}/WEB-INF/web.xml">
      <classes dir="${module.out.dir}" />
      <fileset dir="${web.dir}">
        <!-- Need to exclude it since web.xml is an attribute of the war tag above -->
        <exclude name="WEB-INF/web.xml" />
        <exclude name="js/app/spec/*" />
      </fileset>
      <lib dir="${lib.dir}/build" />
      <lib dir="${lib.local.external.dir}" />
      <manifest>
        <attribute name="Version" value="${repository.version}"/>
        <attribute name="Built-On" value="${time.stamp}"/>
      </manifest>
    </war>
  </target>

  <target name="publish.package" depends="build.package">
    <ivy:publish resolver="trunk" update="true" overwrite="true" pubrevision="${repository.version}" artifactspattern="${dist.out.dir}/[artifact].[ext]"/>
  </target>

  <target name="collate.artifacts" depends="build.package">
    <delete dir="${artifacts.out.dir}"/>
    <mkdir dir="${artifacts.out.dir}"/>
    <copy todir="${artifacts.out.dir}">
      <fileset file="${dist.out.dir}/*.war"/>
    </copy>
  </target>

  <!-- Analysis targets -->
  <target name="check.style" depends="retrieve.libs" description="Generates a report of code convention violations.">
    <taskdef resource="checkstyletask.properties" classpathref="analysis.classpath"/>
    <mkdir dir="${report.out.dir}"/>
    <checkstyle config="${project.root.dir}/src/code-style.xml" failureProperty="style.failure" failOnViolation="false" classpathref="build.classpath">
      <formatter type="xml" tofile="${report.out.dir}/checkstyle-report.xml"/>
      <formatter type="plain" />
      <fileset dir="${src.dir}" includes="**/*.java"/>
    </checkstyle>
  </target>

  <target name="check.test.style" depends="retrieve.libs" description="Generates a report of code convention violations in tests.">
    <taskdef resource="checkstyletask.properties" classpathref="analysis.classpath"/>
    <mkdir dir="${report.out.dir}"/>
    <checkstyle config="${project.root.dir}/src/code-style-tests.xml" failureProperty="style.failure" failOnViolation="false" classpathref="build.classpath">
      <formatter type="xml" tofile="${report.out.dir}/checkstyle-report-tests.xml"/>
      <formatter type="plain" />
      <fileset dir="${test.dir}" includes="**/*.java"/>
    </checkstyle>
  </target>

  <target name="check.bugs" depends="compile.production" description="Generates a Findbugs report">
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="analysis.classpath"/>
    <mkdir dir="${report.out.dir}"/>
    <findbugs classpathref="analysis.classpath" output="emacs" warningsProperty="bug.failure" jvmargs="-Xmx512M" excludeFilter="${project.root.dir}/src/code-rules.xml">
      <auxClasspath refid="build.classpath"/>
      <sourcePath path="${src.dir}"/>
      <class location="${module.out.dir}"/>
    </findbugs>
  </target>

  <target name="check.quality" depends="check.style, check.test.style, check.bugs"/>

  <!-- JS targets -->
  <target name="check.extras" />

  <target name="unit.test.js" depends="retrieve.libs, find.phantom">
    <echo>Running: ${phantom.executable}</echo>
    <exec executable="${phantom.executable}" resultproperty="js.test.result">
      <arg value="web/js/app/spec/run-jasmine.js"/>
      <arg value="web/js/app/spec/SpecRunner.html"/>
    </exec>
    <condition property="js.test.failure">
      <not>
        <equals arg1="${js.test.result}" arg2="0" />
      </not>
    </condition>
  </target>

  <!-- Documentation targets -->
  <target name="generate.docs" depends="compile.production" description="Create the javadoc files">
    <javadoc packagenames="uk.ac.ox.zoo.seeg.abraid.mp.*" sourcepath="${src.dir}" destdir="${doc.out.dir}" author="true" version="true" use="true" failonerror="false">
      <classpath>
        <dirset dir="${module.out.dir}"/>
        <path refid="build.classpath"/>
      </classpath>
    </javadoc>
  </target>

  <!-- Clean targets -->
  <target name="clean" description="cleanup module">
    <delete dir="${module.out.dir}"/>
    <delete dir="${test.out.dir}"/>
  </target>

  <target name="clean.full" depends="clean">
    <delete dir="${lib.dir}"/>
    <delete dir="${lib.local.dir}"/>
    <delete dir="${out.dir}"/>
  </target>
</project>

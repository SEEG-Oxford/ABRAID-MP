<?xml version="1.0" encoding="UTF-8"?>
<project name="module_build" default="build" xmlns:ivy="antlib:org.apache.ivy.ant">
  <property environment="env"/>

  <basename property="module.name" file="${basedir}"/>

  <!-- Directories -->
  <property name="project.root.dir" value="${basedir}/../.."/>
  <property name="out.dir" value="${basedir}/out"/>
  <property name="dist.out.dir" value="${out.dir}/dist"/>
  <property name="module.out.dir" value="${out.dir}/production"/>
  <property name="test.out.dir" value="${out.dir}/test"/>
  <property name="doc.out.dir" value="${out.dir}/doc"/>
  <property name="report.out.dir" value="${out.dir}/report"/>
  <property name="lib.dir" value="${basedir}/lib"/>
  <property name="lib-local.dir" value="${basedir}/lib-local" />
  <property name="src.dir" value="${basedir}/src"/>
  <property name="test.dir" value="${basedir}/test"/>
  <property name="web.dir" value="${basedir}/web"/>

  <!-- Compiler options -->
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="128m"/>

  <!-- JDK -->
  <property name="jdk.home" value="${java.home}"/>

  <!-- Properties override. Default build settings go in build.properties, override these using user.properties (the latter is not checked in) -->
  <property file="${basedir}/user.properties"/>
  <property file="${basedir}/build.properties"/>
  <property file="${project.root.dir}/user.properties"/>
  <property file="${project.root.dir}/build.properties"/>

  <!-- Versioning -->
  <exec executable="git" outputproperty="repository.version">
    <arg value="describe"/>
    <arg value="--dirty"/>
  </exec>
  <tstamp>
    <format property="time.stamp" pattern="yyyy-MM-dd_HH:mm:ss"/>
  </tstamp>
  <echo>Ant running against repository verion: ${repository.version}</echo>

  <!-- Classpath -->
  <path id="build.classpath">
    <fileset dir="${lib.dir}/build" includes="*.jar"/>
    <fileset dir="${lib-local.dir}" includes="*.jar"/>
  </path>

  <path id="test.classpath">
    <fileset dir="${lib.dir}/build" includes="*.jar"/>
    <fileset dir="${lib.dir}/test" includes="*.jar"/>
    <fileset dir="${lib-local.dir}" includes="*.jar"/>
  </path>

  <path id="analysis.classpath">
    <fileset dir="${lib.dir}/analysis" includes="*.jar"/>
  </path>

  <!-- CI targets -->
  <target name="full" depends="print.start, clean, compile.production, compile.tests, unit.test, check.quality, publish.package, print.summary" description="Build pipeline"> <!-- Add generate.docs -->
    <fail message="Quality checks failed!" if="build.failure" />
  </target>

  <target name="print.summary" depends="test.summary, style.summary, bug.summary, combine.results, composite.summary" />

  <target name="print.start">
    <echo message="[Summary]" />
    <echo message="[Summary] Starting ${module.name}" />
  </target>

  <target name="test.summary" if="test.failure">
    <echo>[Summary] ${module.name}: Tests unsuccessful!</echo>
  </target>

  <target name="style.summary" if="style.failure">
    <echo>[Summary] ${module.name}: Styling errors!</echo>
  </target>

  <target name="bug.summary" if="bug.failure">
    <echo>[Summary] ${module.name}: Bugs detected!</echo>
  </target>

  <target name="combine.results">
    <condition property="build.failure">
        <or>
          <isset property="test.failure"/>
          <isset property="style.failure"/>
          <isset property="bug.failure"/>
       </or>
     </condition>
  </target>

  <target name="composite.summary" unless="build.failure">
    <echo>[Summary] ${module.name}: Quality checks passed!</echo>
  </target>

  <!-- Build targets -->
  <target name="build" depends="clean, compile.production, compile.tests, publish.package" description="Compile module"/>

  <target name="compile.production" depends="retrieve.libs" description="Compile module; production classes">
    <mkdir dir="${module.out.dir}"/>
    <!-- Build -->
    <javac destdir="${module.out.dir}" srcdir="${src.dir}" classpathref="build.classpath" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" includeantruntime="false">
      <compilerarg line="${compiler.args}"/>
    </javac>
    <!-- Copy resources -->
    <copy todir="${module.out.dir}">
      <fileset dir="${src.dir}">
        <patternset>
          <exclude name="**/?*.java"/>
          <exclude name="**/?*.class"/>
        </patternset>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.tests" depends="compile.production" description="Compile module; test classes" unless="skip.tests">
    <mkdir dir="${test.out.dir}"/>
    <!-- Build -->
    <javac destdir="${test.out.dir}" srcdir="${test.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" includeantruntime="false">
      <classpath>
        <path refid="test.classpath"/>
        <dirset dir="${module.out.dir}"/>
      </classpath>
      <compilerarg line="${compiler.args}"/>
    </javac>
    <!-- Copy resources -->
    <copy todir="${test.out.dir}">
      <fileset dir="${test.dir}">
        <patternset>
          <exclude name="**/?*.java"/>
          <exclude name="**/?*.class"/>
        </patternset>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <!-- Lib targets -->
  <property name="ivy.install.version" value="2.3.0" />
  <condition property="ivy.home" value="${env.IVY_HOME}">
    <isset property="env.IVY_HOME" />
  </condition>
  <property name="ivy.home" value="${user.home}/.ant" />
  <property name="ivy.jar.dir" value="${ivy.home}/lib" />
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

  <target name="download.ivy">
    <mkdir dir="${ivy.jar.dir}"/>
    <!-- download Ivy from web site so that it can be used even without any special installation -->
    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <target name="init.ivy" depends="download.ivy">
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    <ivy:settings file="${project.root.dir}/src/ivy-settings.xml" />
  </target>

  <target name="resolve.libs" depends="init.ivy">
   <ivy:resolve log="download-only"/>
  </target>

  <target name="retrieve.libs" depends="resolve.libs">
    <mkdir dir="${lib.dir}" />
    <mkdir dir="${lib-local.dir}" />
    <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision]-[type].[ext]" sync="true" />
  </target>

  <!-- Test targets -->
  <target name="unit.test" depends="compile.tests">
    <junit printsummary="off" fork="yes" forkmode="once" failureproperty="test.failure">
      <jvmarg value="-Xms128M"/>
      <jvmarg value="-Xmn64M"/>
      <jvmarg value="-Xmx512M"/>
      <formatter type="brief" usefile="false"/>
      <classpath>
        <path refid="test.classpath"/>
        <dirset dir="${module.out.dir}"/>
        <dirset dir="${test.out.dir}"/>
      </classpath>
      <batchtest>
        <fileset dir="${test.out.dir}" includes="**/*Test.class" />
      </batchtest>
    </junit>
  </target>

  <!-- Package targets -->
  <target name="build.package" depends="build.jar" description="Builds a deployment package, default to building a JAR, override at module level to build WAR."/>

  <target name="build.jar" depends="compile.production">
    <jar jarfile="${dist.out.dir}/ABRAID-MP_${module.name}.jar">
      <fileset dir="${module.out.dir}">
        <include name="**/*.class"/>
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>
      </fileset>
      <manifest>
        <attribute name="Version" value="${repository.version}"/>
        <attribute name="Built-On" value="${time.stamp}"/>
      </manifest>
    </jar>
  </target>

  <target name="build.war" depends="compile.production">
    <war warfile="${dist.out.dir}/ABRAID-MP_${module.name}.war" webxml="${web.dir}/WEB-INF/web.xml">
      <classes dir="${module.out.dir}" />
      <fileset dir="${web.dir}">
        <!-- Need to exclude it since webxml is an attribute of the war tag above -->
        <exclude name="WEB-INF/web.xml" />
      </fileset>
      <lib dir="${lib.dir}/build" />
      <lib dir="${lib-local.dir}" />
      <manifest>
        <attribute name="Version" value="${repository.version}"/>
        <attribute name="Built-On" value="${time.stamp}"/>
      </manifest>
    </war>
  </target>

  <target name="publish.package" depends="build.package">
    <ivy:publish resolver="trunk" update="true" overwrite="true" pubrevision="${repository.version}" artifactspattern="${dist.out.dir}/[artifact].[ext]"/>
  </target>

  <!-- Analysis targets -->
  <target name="check.style" depends="retrieve.libs" description="Generates a report of code convention violations.">
    <taskdef resource="checkstyletask.properties" classpathref="analysis.classpath"/>
    <mkdir dir="${report.out.dir}"/>
    <checkstyle config="${project.root.dir}/src/code-style.xml" failureProperty="style.failure" failOnViolation="false" classpathref="build.classpath">
      <formatter type="xml" tofile="${report.out.dir}/checkstyle-report.xml"/>
      <formatter type="plain" />
      <fileset dir="${src.dir}" includes="**/*.java"/>
    </checkstyle>
  </target>

  <target name="check.bugs" depends="compile.production" description="Generates a Findbugs report">
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="analysis.classpath"/>
    <mkdir dir="${report.out.dir}"/>
    <findbugs classpathref="analysis.classpath" output="emacs" warningsProperty="bug.failure" jvmargs="-Xmx512M" excludeFilter="${project.root.dir}/src/code-rules.xml">
      <auxClasspath refid="build.classpath"/>
      <sourcePath path="${src.dir}"/>
      <class location="${module.out.dir}"/>
    </findbugs>
  </target>

  <target name="check.quality" depends="check.style, check.bugs"/>

  <!-- Documentation targets -->
  <target name="generate.docs" depends="compile.production" description="Create the javadoc files">
    <javadoc packagenames="uk.ac.ox.zoo.seeg.abraid.mp.*" sourcepath="${src.dir}" destdir="${doc.out.dir}" author="true" version="true" use="true" failonerror="false">
      <classpath>
        <dirset dir="${module.out.dir}"/>
        <path refid="build.classpath"/>
      </classpath>
    </javadoc>
  </target>

  <!-- Clean targets -->
  <target name="clean" description="cleanup module">
    <delete dir="${module.out.dir}"/>
    <delete dir="${test.out.dir}"/>
  </target>

  <target name="clean.full" depends="clean">
    <delete dir="${lib.dir}"/>
    <delete dir="${lib-local.dir}"/>
    <delete dir="${out.dir}"/>
  </target>
</project>
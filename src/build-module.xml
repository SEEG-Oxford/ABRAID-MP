<?xml version="1.0" encoding="UTF-8"?>
<project name="module_build" default="build" xmlns:ivy="antlib:org.apache.ivy.ant">
  <property environment="env"/>

  <!-- Directories -->
  <property name="project.root.dir" value="${basedir}/../.." />
  <property name="out.dir" value="${basedir}/out" />
  <property name="module.out.dir" value="${out.dir}/production" />
  <property name="test.out.dir" value="${out.dir}/test" />
  <property name="lib.dir" value="${basedir}/lib" />
  <property name="src.dir" value="${basedir}/src" />  
  <property name="test.dir" value="${basedir}/test" />
  <property name="report.dir" value="${basedir}/report" />

  <!-- Compiler options -->
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="128m"/>

  <!-- JDK -->
  <property name="jdk.home" value="${java.home}"/>
  
  <!-- Properties override --> 
  <property file="${project.root.dir}/build.properties"/>
  <property file="${basedir}/build.properties"/>

  <!-- Classpath -->
  <path id="classpath">
    <fileset dir="${lib.dir}" includes="*.jar"/>
  </path>

  <!-- Build targets -->
  <target name="build" depends="compile.production, compile.tests" description="Compile module"/>
  
  <target name="compile.production" depends="retrieve.libs" description="Compile module; production classes">
    <mkdir dir="${module.out.dir}"/>
    <!-- Build -->
    <javac destdir="${module.out.dir}" srcdir="${src.dir}" classpathref="classpath" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" includeantruntime="false">
      <compilerarg line="${compiler.args}"/>
    </javac>    
    <!-- Copy resources -->
    <copy todir="${module.out.dir}">
      <fileset dir="${src.dir}">
        <patternset> 
          <exclude name="**/?*.java"/>
          <exclude name="**/?*.class"/>
        </patternset>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.tests" depends="compile.production" description="Compile module; test classes" unless="skip.tests">
    <mkdir dir="${test.out.dir}"/>
    <!-- Build -->
    <javac destdir="${test.out.dir}" srcdir="${test.dir}" classpathref="classpath" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" includeantruntime="false">
      <classpath path="${module.out.dir}"/>
      <compilerarg line="${compiler.args}"/>
    </javac>    
    <!-- Copy resources -->
    <copy todir="${test.out.dir}">
      <fileset dir="${test.dir}">
        <patternset> 
          <exclude name="**/?*.java"/>
          <exclude name="**/?*.class"/>
        </patternset>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <!-- Lib targets --> 
  <ivy:settings file="${project.root.dir}/ivysettings.xml"/>
  
  <target name="resolve.libs">
   <ivy:resolve/>
  </target>

  <target name="retrieve.libs" depends="resolve.libs">
    <ivy:retrieve pattern="${lib.dir}/[artifact]-[revision]-[type].[ext]" sync="true"/>
  </target>

  <!-- Test targets -->   
  <target name="unit.test" depends="compile.tests">
    <junit printsummary="yes" fork="no" haltonfailure="yes">
        <formatter type="plain" usefile="false" />
        <formatter type="plain" />
        <classpath refid="classpath"/>
        <classpath path="${test.out.dir}"/>
        <classpath path="${module.out.dir}"/>
        <batchtest todir="${report.dir}">
          <fileset dir="${test.out.dir}" includes="**/*.class" />
        </batchtest>
    </junit>
  </target>

  <!-- Package targets -->   

  <!-- Analysis targets --> 
  <property name="findbugs.home" value="${env.FINDBUGS_HOME}" />
  <path id="findbugs.path">
    <fileset dir="${findbugs.home}/lib" includes="*.jar"/>
  </path>
  <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="findbugs.path"/>
 
  <target name="check.bugs" depends="compile.production" description="Generates a Findbugs report">
      <mkdir dir="${report.dir}"/>
      <findbugs home="${findbugs.home}" output="xml" outputFile="${report.dir}/findbugs-report.xml" jvmargs="-Xmx512M">
          <auxClasspath>
              <fileset dir="${lib.dir}" includes="*.jar"/>
          </auxClasspath>
          <sourcePath path="${src.dir}"/>
          <class location="${out.dir}"/>
      </findbugs>
  </target>

  <property name="checkstyle.home" value="${env.CHECKSTYLE_HOME}" />
  <path id="checkstyle.path">
    <fileset dir="${checkstyle.home}" includes="*.jar"/>
  </path>
  <taskdef resource="checkstyletask.properties" classpathref="checkstyle.path" />

  <target name="check.style" description="Generates a report of code convention violations.">
    <mkdir dir="${report.dir}"/>
      <checkstyle config="${project.root.dir}/code-style.xml" failureProperty="checkstyle.failure" failOnViolation="false">
          <formatter type="xml" tofile="${report.dir}/checkstyle-report.xml"/>
          <fileset dir="${basedir}" includes="**/*.java"/>
      </checkstyle>
  </target>

  <target name="check.quality" depends="check.style, check.bugs" />

  <!-- Clean targets --> 
  <target name="clean" description="cleanup module">
    <delete dir="${module.out.dir}"/>
    <delete dir="${test.out.dir}"/>
  </target>
  
  <target name="clean.full" depends="clean">
    <delete dir="${lib.dir}"/>
    <delete dir="${report.dir}"/>
  </target>
</project>